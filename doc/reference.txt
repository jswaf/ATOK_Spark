
ATOK Spark リファレンス
　　　　　　　Ver 1.0.2.0
株式会社ジャストシステム

==============================

■ ATOK Sparkの定型フレーズ入力をカスタマイズする

　カスタマイズには次の方法があります。
　　・profile.xml
　　・定義ファイル
　　・プラグイン


■ profile.xml について

　個人毎に異なる情報と、
　動作の設定を記載します。

　profile要素に含まれる要素は
　定義ファイルから参照可能です。
　例えば profile/name に記述されたテキストノードは
　定義ファイル中において、#ATOK::PROFILE[name]# により利用できます。

　setting要素は動作の設定を行います。
　現状では以下の設定があります。

　　=====================
　　タグ名： add-firekey
　　platform属性： windows もしくは mac （省略時は両方）
　　値(macのとき)： 英数 / SPACE 
　　値(windowsのとき)： F1 / SPACE / 変換 
　　=====================

　ATOK Sparkを起動中にprofile.xmlを編集した場合は、
　ATOK Sparkのメニューから[定義ファイルのリスキャン]を行うと
　反映されます。


■ 定義ファイルについて

　ATOK Sparkでは、定義ファイルにより
　実行可能な処理を拡張することができます。

　定義ファイルは、
　ATOK Sparkフォルダのdef_file以下にxmlファイルとして設置します。



● ユーザー作成の定義ファイルの作成について

　新しい定義ファイルを作成することも、
　サンプルの定義ファイルを編集することもできます。

　しかし、サンプルの定義ファイルを編集して上書きして使用している場合、
　ATOK Sparkのアップデートに伴い、定義ファイルを上書きしてしまうことで、
　ユーザー作成の定義が失われる可能性があります。

　そのため、サンプルの定義ファイルとは別名を付けて、
　保存することを推奨します。


● 定義ファイルのロードについて

　ATOK Sparkが既に読み込んでいる定義ファイルについては、
　エディタ等によりファイルの上書き保存を行ったタイミングで
　自動的に再読込が行われます。

　新規に定義ファイルを作成した場合には、
　ATOK Sparkのメニューから[定義ファイルのリスキャン]を行うと
　読み込まれます。

　なお、定義ファイルの構文エラーなどにより、
　定義ファイルが読み込むことができなかった場合は、
　その定義ファイルはロードされていない状態となります。
　修正後の読み込みは、[定義ファイルのリスキャン]が必要です。


● フォーマット

　定義ファイルのフォーマットはXML(UTF8 BOMなし)です。


● 実行種別

　ATOK Sparkで実行可能な処理は、以下の通りです。

　・置換入力
　　入力した文字列を他の文字列に置き換えます。
　　※ 定型文の入力に利用します。

　・閲覧表示
　　別のウィンドウで情報の詳細を表示します。
　　[ESC]キーで画面を閉じます。
　　※ 情報の確認に利用します。


● トリガー

　定義ファイルで規定する実行可能な処理について、
　処理を発動するための打鍵文字列をトリガーと呼びます。

　定義ファイルで定められた
　処理を実行する場合にはトリガーを入力して、
　ENTERキーを押下します。

　トリガーが、『test:』である場合は
　test:[ENTER]
　で発動します。



● 定義ファイルの記載内容(XMLフォーマット)について

◎ 処理起点ルート（実行可能な処理の記述）

　各処理は以下のタグの中に記述します。
　これらをまとめて処理起点ルートと呼びます。

　・置換入力：　<replace> タグ
　・閲覧表示：　<view> タグ


◎ 処理起点ルートの子要素について

　処理起点ルートの子要素として、
　・トリガー要素
　・テキスト要素
　・付加要素（任意）
　を記述します。


◎ トリガー要素

　トリガー要素において、実行可能な処理を発動するためのトリガーを定義します。
　トリガーは次の２種類の指定方法があります。

　・完全一致マッチング
　　打鍵したキーとトリガー要素と完全一致した場合、該当する処理を実行します。
　　通常はこちらを利用します。

　　=====================
　　　タグ名： trigger
　　　値： 文字列
　　　type属性： matching（省略可）
　　=====================


　　（例）
　　　　<trigger>test:</trigger>
　　　　 test:[ENTER] で発動します。

　・正規表現マッチング
　　打鍵したキーに対してトリガー要素で正規表現によるマッチングを行い、
　　マッチングすれば該当する処理を実行します。
　　マッチングしたグループ要素は、利用可能です。（→プリプロセス文字列を参照）

　　=====================
　　　タグ名： trigger
　　　値： 文字列
　　　type属性： regex
　　=====================

　　（例）
　　　　<trigger type="regex" min="12" max="12">ranking([12][0-9]{3}):</trigger>
　　　　　ranking1998:[ENTER] や 
　　　　　ranking2011:[ENTER] で発動します。


　　正規表現マッチングの場合、以下の属性を指定します。
　　属性は枝刈りに使用しますが、現在は未実装のため数値を無視されます。
　　=====================
　　　min属性：トリガーの最小マッチ文字数です。
　　　　　　　　これ未満の打鍵文字数は正規表現のマッチング判定をしません。
　　　max属性：トリガーの最大マッチ文字数です。
　　　　　　　　これより多い打鍵文字数は正規表現のマッチング判定をしません。
　　=====================


◎ テキスト要素

　テキスト要素は、各実行可能な処理に対して、与える文字列を記載します。
　・置換入力の場合は、置き換え後の文字列を指定する場所となります。
　・閲覧表示の場合は、閲覧する表示内容（XHTML）を記載します。
　　　　　　　　　　　（利用可能なタグには下記記載の通りの制限があります）


　テキスト要素は複数の方法で指定が可能です。
　・テキスト指定
　・XSLT
　・プレーンテキストファイル


　それぞれの指定方法の説明をします。

　・テキスト指定
　　与える文字列をそのまま書きます。
　　単純なフレーズを記載する場合の利用が便利です。

　　=====================
　　　タグ名： text
　　　値： 文字列
　　　type属性：(省略）
　　=====================

　　（例）
　　　　<text>This is ATOK Sparkテスト実行</text>


　　※ XMLとして利用できない文字列（>など）は、
　　　　エンティティ参照で記載する必要があります。

　　（例）
　　　　<text>std::cout &lt;&lt;</text>


　　※ CDATAを利用すれば、エンティティ参照を回避できます。

　　（例）
　　　　<text><![CDATA[   <h3 class="header">見出し</h3>]]></text>


　・XSLT
　　データと整形フォーマットで生成します。
　　一つの巨大なデータ群から、
　　任意のフォーマットで整形する場合などの利用が便利です。

　　=====================
　　　タグ名： text
　　　値： なし
　　　type属性： xslt
　　　xml属性： データXMLファイルへの相対ファイルパス
　　　xsl属性： 整形フォーマットXSLファイルへの相対ファイルパス
　　=====================
　　※ セキュリティ上、XML/XSTファイルは
　　　　定義ファイルより下のフォルダしか指定できません。　

　　（例）
	<text type="xslt"
		xml="my_company/team_member.xml"
		xsl="my_company/name_list.xsl" />


　・プレーンテキスト
　　プレーンテキスト(UTF-8)ファイルを読み込みます。
　　置き換え先のフレーズが長い場合の利用が便利です。
　　=====================
　　　タグ名： text
　　　値： 文字列
　　　type属性： plain
　　　file属性：テキストファイルへの相対ファイルパス
　　=====================
　　※ セキュリティ上、テキストファイルは
　　　　定義ファイルより下のフォルダしか指定できません。　

　　（例）
	<text type="plain"
		file="my_snipets/latex.tex" />


◎ 付加要素

　XML/XSLファイル中に現れる特定文字列について、
　本付加要素で置き換えが可能です。
　処理に対する引数として利用が可能です。
　　（→プリプロセス文字列を参照）

　　=====================
　　　タグ名： define
　　　値： 文字列
　　=====================

　　（例）
	<define>東京都</define>


　　複数列挙も可能です。

　　（例）
	<define>東京都</define>
	<define>新宿区</define>



◎ プリプロセス文字列

　読み込んだ文字列
　（テキスト要素、XML/XSLファイル、プレーンテキスト）中において
　以下の特定の文字列が現れた場合は、置き換えを行います。

　これらの処理は最前段で行われます。
　そのため、XSLT変換の前に置換が完了します。
　そのためXSLTに影響を与えることができます。
　原則、自動的にエンティティ参照に変換されます。

　○ 日時
　　・年月日
　　　#ATOK::DATE[YMD_D_H]#  :  2016年8月9日  : 年月日/西暦/アラビア数字/半角
　　　#ATOK::DATE[YMD_D_Z]#  :  ２０１６年８月９日  : 年月日/西暦/アラビア数字/全角
　　　#ATOK::DATE[GMD_D_H]#　： 平成28年8月9日 : 年月日/和暦/アラビア数字/半角
　　　#ATOK::DATE[GMD_D_Z]#　： 平成２８年８月９日 : 年月日/和暦/アラビア数字/全角

　　・時分秒
　　　#ATOK::DATE[HMM_D_H]#  :  20:51  : 時分/24時間/アラビア数字/半角


　○ プロファイル定義
　　profile.xml で指定した文字列

　　名前
　　　#ATOK::PROFILE[name]#

　　名前（姓）
　　　#ATOK::PROFILE[name_short]#

　　企業名
　　　#ATOK::PROFILE[company]#

　　部署名
　　　#ATOK::PROFILE[section]#

　　上記はデフォルトのprofile.xmlで定義されたものの例です。
　　任意の要素を、profile.xmlで指定することで、
　　#ATOK::PROFILE[***]# の引数のパラメータとして利用可能です。

　　該当する引数が存在しなければ、空文字列となります。

　○ 付加要素
　　定義ファイルにおいてdefineとして記載した文字列に置き換えます。
　　インデクスはdefineの記述順であり、0起点となります。
　　該当するdefine定義が存在しなければ、空文字列となります。

　　　#ATOK::DEFINE::TEXT[0]#
　　　#ATOK::DEFINE::TEXT[1]#
　　　...
　　　#ATOK::DEFINE::TEXT[19]#


　○ 正規表現グループ
　　正規表現でグループ化した文字列に置き換えます。
　　インデックスはグループ化によりキャプチャされた文字列で、1起点となります。
　　該当するグループが存在しなければ、空文字列となります。

　　　#ATOK::REGEX::CAPTURE[1]#
　　　#ATOK::REGEX::CAPTURE[2]#
　　　...
　　　#ATOK::REGEX::CAPTURE[19]#


　○ クリップボード
　　クリップボードの内容に置き換えます。
　　該当する履歴が存在しなければ、空文字列となります。

　　現在のクリップボード
　　　#ATOK::CLIPBOARD::HISTORY[0]#

　　過去のクリップボード（履歴/↑が新しい）
　　　#ATOK::CLIPBOARD::HISTORY[1]#
　　　#ATOK::CLIPBOARD::HISTORY[2]#
　　　...
　　　#ATOK::CLIPBOARD::HISTORY[19]#


　○ 内部置換（関数）
　　　指定したトリガーで発動した内容に置き換えます。
　　　
　　　（例）
　　　　　これは「#ATOK::INPUT::TXT[test:]#」です。

　　　この場合、test:の打鍵結果が内部置換されます
　　　※ プラグインの呼び出しも可能

　○ トリガーヘルプ
　　　現在利用可能なトリガーのヘルプ情報を取得します。
　　　#ATOK::TRIGGER::HELP#

　　★ 上級者向けガイド： 引数渡しを行う
　　　　内部で実行される関数のトリガーのキャプチャを正規表現で行い、
　　　　呼び出す側の内部置換の指示（TXT要素の中身）に、
　　　　受け渡ししたいデータを記載することで、
　　　　変数を受け渡しすることができます。


　○ 評価順による制限について
　　　プリプロセス置換文字列の評価順による問題により、
　　　複数のプリプロセスが入れ子となる場合、
　　　期待する置換が行われない場合があります。

　　　その場合は、入れ子となる要素を付加要素(DEFINE)に切り出すと
　　　適切な評価順による置換が行われ、
　　　期待する動作が実現できる場合があります。


　○ プリプロセス文字列指示
　　　以下の属性を付与すると、
　　　プリプロセスの再終段で文字列の生成結果を加工します。
　　　※ 通常は指定しません

　　　・XMLエンティティ参照を解決する
　　　　=====================
　　　　　preprocess属性： xmldecode;
　　　　=====================

　　　　（例）
　　　　　　<text preprocess="xmldecode;">&amp;lt;</text>


◎ ポストプロセス文字列

　最後段で実行されます。
　XSLT変換に影響を与えません。

　○ カーソル位置を指定

　　記載がある位置にカーソルを移動します。
　　複数ある場合は最初の記載が利用されます。

　　　#ATOK::CURSOR#

　　（例）
　　　　<text><![CDATA[   <h3 class="header">#ATOK::CURSOR#</h3>]]></text>



◎ ヘルプについて

　ヘルプは３つの要素があります。
　・単一定義フレーズヘルプ
　・複数フレーズ集約ヘルプ
　・自動生成ヘルプ

　それぞれの指定方法を説明します。

　・単一定義フレーズヘルプ
　　　簡単なスニペットでの利用を推奨します。

　　　処理起点ルートに記載します。
　　　ひとつのトリガーごとに一つのヘルプとなります。

　　　処理起点ルートには、<help>の中にヘルプを書きます。
　　　※ 属性・タグの両方対応


　・複数フレーズ集約ヘルプ
　　　複数の定義をまとめて、一つの処理とする場合の使用を推奨します。

　　　１つの定義ファイルで行う複数の処理をまとめて、
　　　一つのヘルプとすることができます。


　　　ヘルプの記載項目
　　　（例）
　　　　　　　<help name="****">
		<guidance>概要見出し</guidance>
		<detail>コマンドの詳細。</detail>
		<notice>注意点。</notice>
		<example guid="サンプルの概要">*サンプル*</example>
　　　　　　　</help>


　　　定型フレーズ定義の処理起点ルートには、
　　　<help class="****" / >と記載します。
　　　nameとclassは一致させてください。
　　　記載するnameはグローバルです。


　・自動生成ヘルプ
　　　ヘルプの記載をしていない定型フレーズ定義は、
　　　自動的に簡易なヘルプが生成されます。

● プラグインについて

　任意のプログラム言語で機能を拡張することができます。
　plugin\plugin.lst に実行可能ファイルを記載することで、
　プラグインが動作します。

　プラグインは標準入出力のI/Fにより接続されます。
　詳しくは、plugin\srcフォルダにあるサンプルファイルを確認ください。




● HTMLビューアで指定可能なXHTMLタグ

html , body , div , span , h1 , h2 , h3 , h4 , h5 , h6 , p , br , blockquote , q , cite , em , strong , dfn , abbr , acronym , sup , sub , pre , code , var , kbd , samp , ins , del , bdo ,  , ruby , rb , rt , rp , rbc , rtc , hr , tt , i , b , big , small , u , strike , s , font , basefont , center , img , map , ul , ol , li , dl , dt , dd , dir , menu , table , caption , tr , th , td , thead , tfoot , tbody , colgroup , col

